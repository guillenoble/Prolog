cmdhistory=["(run-test)" "(filter-odd [1,2,3,4,5])" "(filter-odd\: [1,2,3,4,5,6])" "(filter-odd\: (range 10))" "(filter odd? (range 10))\!" "(filter odd? (range 10))" "(map odd? (range 10))" "(filter-odd\: (1,2,3,5,6))" "(filter-odd? (1,2,3,4,5,6))" "(map odd? (range 10))" "(filter odd\: (1,2,3,4,5,6))" "(filter-odd\: [juan])" "(filter-odd\: [s])" "(filter-odd\: ([s]))" "(filter-odd\: ([2]))" "(filter-odd 1,2,3)" "(filter-odd s)" "(filter-odd 2)" "(filter-odd\: (2))" "(filter-odd 2)" "\#'user/filter-odd" "(filter-odd\: [2])" "(filter-odd [2])" "(filter-odd\: [2])" "(filter-odd\: (2))" "(first(1 2 3))" "(first ''(A B C))" "(FIRST '(A B C))" "(first [1 2 3])" "(FIRST '(A B C))" "(FIRST '[A B C])" "(square\: (2 2))" "(square\: [2 2])" "laaaaaaaaa putaaaaaaaaaaaaaa" "(square 2 2)" "(square 2)" "(square 56)" "(filter-odd 4)" "(filter-odd 2)" "(filter-odd 3)" "(filter-odd 5)" "(filter-odd 3)" "(filter-odd 2)" "(filter-odd 3)" "(filter-odd 2)" "laaaaaaaaaaa putaaaaaaaaaaaaaaa" "(filter-odd 3)" "(filter-odd 4)" "(filter-odd 3)" "(filter-odd 1 2 3)" "(filter-0dd 2)" "(filter-odd 2)" "(filter-odd 3)" "(factorial 2)" "(filter-odd 3)" "(filter-odd 2)" "(filter-odd 3)" "(filter-odd 1 2 3 4 5 6)" "(filter-odd [1 2 3 4 5 6])" "(filter-odd\: [1 2 3 4 5 6])" " (filter-odd [1 2 3 4 5 6])" "(filter-odd [1 2 3 4 5])" "(filter-odd [2 3 4 5 6])" "(filter-odd [1 2 3 4 5 6 7 8 11 22 43 2212 232323423])" "(filter-odd [1 23 546 234 34 73 32 3 34 2 2323 567 893 234 64564552343436675786745 2223 23 5 6 76583 444])" "(run-test)" "(implement-range 1 10)" "(filter-odd 1 2 3 4 5 6)" "(filter-odd 1 2 3 4 5 6 7)" "(filter-odd [1 2 3 4 5 6 7])" "(implementRange [1 2 3 4] [2 3 4 5])" "(kata/nil-key \:a {\:a nil \:b 2})" "(nil-key \:a {\:a nil \:b 2})" "(nil-key \:b {\:a nil \:b 2})" "(nil-key \:a {\:a nil \:b 2})" "(nil-key \:a {\:a 5 \:b 2})" "(nil-key \:a {\:f nil \:b 2})" "(nil-key \:a {\:a 2 \:b 2})" "(nil-key \:a {\:a nil \:b 2})" "(nil-key \:b {\:a nil \:b 2})" "(nil-key \:a {\:a nil \:b 2})" "(nil-key \:a {\:a 4 \:b 2})" "(filter-odd [1 2 3 4])" "(filter-odd [2 4 6])" "(reduce +(range 10))" "(implementRange 2 4)" "(implement [1 2 3 4])" "(implement [1 2 3 4 5] [ 3 2 3])" "(implementRange [1 2 3 4])" "(implementRange [1 2 3] [ 34 234 2])" "(implementRange [1 2 3])" "(implementRange [1 2 3 4])" "(implementRange 1)" "(retrive-caps \\"hola\\")" "(retrieve-caps 2)" "(retrieve-caps [\\"hola jose\\"])" "(retrieve-caps \\"hola\\")" "(retrieve-caps [hola manola])" "(inter-two [1 2 3 4] [5 6 7 8])" "(reduce(fn[s1 s2](+ s1 s2))(range 10))" "(inter-two 2 2)" "(inter-two [2 3 4] [4 5 6 7 8 9])" "(inter-two 2 3)" "(map + [2 3 4] [5 6 7])" "(inter-two [2 3][4 5])" "(inter-two 2 3)" "(inter-two [ 12 3 34][2 4 5 6])" "(implementRange 1 4)" "(reduce(fn[s1 s2](str s1 \\"\:\\" s2))(range 10))" "(implementRange 1 4)" "(implementRange [1] [5])" "(implementRange 4 5)" "(implementRange 4 8)" "(inter-two [2 3 4] [\:a \:b \:c])" "(inter-two [1 2 3 4] [5 6 7 8])" "(inter-two [2 3 4] [\:a \:b \:c])" "(implementRange 1 4)" "(implementRange 1 5)" "(implementRange [1 2 3] [3 2 ])" "(retrieve-caps \\"hola\\")" "(retrieve-caps \\"HolA\\")" "(retrieve-caps \\"HOLa\\")" "(retrieve-caps \\"HoLa\\")" "(inter-two (1 2 3 4 5) (2 3 4 5))" "(inter-two [1 2 3 4][3 4 5 6])" "(inter-two [1 2 3] [\:a \:b \:c]) '(1 \:a 2 \:b 3 \:c)" "(retrieve-caps \\"HoLa\\")" "(retrieve-caps [\\"HoLa\\"])" "(sort-by \#(.length %) [\\"the\\" \\"quick\\" \\"brown\\"])" "(sort-by \#(.length %) [\\"the\\" \\"quick\\" \\"brown\\" \\"me\\"])" "(filter \#(.toUpperCase %)[\\"HoLa\\"])" "(filter \#(.isUpperCase %)[\\"HoLa\\"])" "(str\\n  (filter \#(.toUpperCase %)[\\"HoLA\\"]))" "(apply str (filter \#(.toUpperCase %)[\\"HoLA\\"]))" "(apply str (filter \#(.isUpperCase %)[\\"HoLA\\"]))" "(filter (apply str (filter \#(.isUpperCase %)[\\"HoLA\\"])))" "((apply str (filter \#(Character/java.lang.isUpperCase % ) [\\"HoLa\\"])))" "\\r\\n((apply str (filter \#(Character/java.lang.isUpperCase % ) [\\"HoLa\\"])))" "(+ 2 2)" "(filter-odd [1 2 3 4 5])" "(filter-odd (1 2 3 4 4))" "(filter-odd 1 2 3 4 5)" "(filter-odd [1 2 3 4 5])" "(+ 2 2)" "(+(2 2)+(4 4)*2)" "(filter-odd [1 2 3 4 5])" "(filter-dd (1 2 3 4 5 6))" "(filter-odd [1 2 3 4])" "(filter-odd [1 2 3 4 5 6])" "(filter-odd [4 2 1 6])" "[run-test]" "(run-tests)" "(filter-odd [1 2 3 4 5 6])" "(run-test)" "(run-tests)" "(filter-odd [4 2 1 6])" "(nil-key [1 2 3 4 5] [ 3 4 5 6 7 89])" "(nil-key \:a {\:a nil \:b 2})" "(nil-key \:b {\:a nil \:b 2})" "(filter-odd [1 2 3 4 5 6])" "(nil-key \:b {\:a nil \:b 2})" "(filter-odd [1 2 3 4 5 6])" "(filter-odd [4 2 1 6])" "(+ 2 2)" "(filter-odd [1 2 3 4 5 6 7 8])" "(filter-odd \#{1 2 3 4 5})" "(nil-key \:a {\:a nil \:b 2})" "(filter-odd [1 2 3 4 5])" "(nil-key \:a {\:a nil \:b 2})" "(require \u2018code-katas-1.core)" "(require\: \u2018code-katas-1.core)" "(filter-odd [1 2 3 4 5 6])" "(filter-odd [4 2 1 6])" "(filter-odd \#{1 2 3 4 5})" "(require \u2018code-katas-1.core)" "(filter-odd [1 2 3 4 5])" "(require \u2018code-katas-1.core)" "(filter-odd[1 2 3 4])" "(filter-odd \#{1 2 3 4 5})" "code-katas-1.core/filter-odd [1 2 3 4 5 6 7]" "code-katas-1.core/filter-odd \#{1 2 3 4 5}" "(ns user)" "(doc import)" "(ns require \u2018code-katas-1.core)" "(ns code-katas-1)" "(ns code-katas-1.core)" "*ns*" "(ns \#<Namespace code-katas-1.core>)" "(dir code-katas-1.core)" "(code-katas-1.core user)" "*ns*" "(ns code-katas-1.core (\:import (clojure.core) (clojure.repl)))" "(ns code-katas-1.core (\:import (clojure.core import) (clojure.repl/dir)))" "(doc require)" "(clojure.repl/dir)" "(clojure.repl/dir code-katas-1.core)" "(dir user)" "(dir *ns*)" "*ns*" "(require \:reload 'guestbook.models.db)" "(doc require)" "(require \u2018code-katas-1.core)" "(filter-odd [1 2 3 4 5 6])" "(filter-odd \#{1 2 3 4 5})" "(filter-odd [1 2 3 4])" "(filter-odd [1 2 3 4 5 6])" "(filter-odd [1 2 3 4 5 6 7])" "(filter-odd [1 2 3])" "(filter-odd [1 2 3 4 5])" "(nil-key \:a {\:a nil \:b 2})" "(filter-odd [1 2 3 4])" "(filter-odd [1 2 3 4 5])" "(run-tests)" "(max-value 1 2 3 4 5 6)" "(max-value [1 2 3 4 5 6 7 8 9])" "(sort-by \#(.length %)[\\"hola\\" \\"alvarito\\" \\"sos\\" \\"trolito\\"])" "(filter \#(.toUpperCase %)[\\"HoLa\\"])" "(retrieve-caps \\"HolAAA\\")" "(compress-sequence (1 2 3 4 5 6 6))" "(compress-sequence [1 2 3 4 5 6 6])" "(reduce + (filter \#(or (zero? (mod % 3))\\r\\n                       (zero? (mod % 5)))\\r\\n                  (range 100)))" "(reduce (filter \#(or (zero? (mod % 3))\\r\\n                       (zero? (mod % 5)))\\r\\n                  (range 100)))" "(reduce - (filter \#(or (zero? (mod % 3))\\r\\n                       (zero? (mod % 5)))\\r\\n                  (range 1000)))" "(reduce filter(filter \#(or (zero? (mod % 3))\\r\\n                       (zero? (mod % 5)))\\r\\n                  (range 1000)))" "((filter \#(or (zero? (mod % 3))\\r\\n                       (zero? (mod % 5)))\\r\\n                  (range 1000)))" "(drop \\"HoLA\\")" "(retrieve-caps \\"Hola\\")" "(filter (.toUpperCase text)\\"Hola\\")" "(map (fn [text] (filter (.toUpperCase text)\\"Hola\\")))" "(map (fn [x] (.toUpperCase x)) (.split \\"Dasher Dancer Prancer\\" \\" \\"))" "(map(fn [x] (.touppercase x) \\"Hola\\"))" "(map (fn [text] (filter (.toUpperCase text)(\\"Hola\\"))))" "(map(fn[text](filter(.toUpperCase text)(\\"Hola\\"))))" "(fn[text](filter(.toUpperCase text)(\\"Hola\\")))" "(apply(fn[text](filter(.toUpperCase text)(\\"Hola\\"))))" "(fn[text] (apply(filter(.toUpperCase text)(\\"Hola\\"))))" "(seq {\:a 1 \:b 2})" "(split-two {\:a 1 \:b 2})" "(split-two 3 [1 2 3 4 5 6])" "(seq {\:a 1 \:b 2} {\:a 1 \:b 3})" "(filter (fn [x] (.toUpperCase x)) (.split \\"Dasher Dancer Prancer\\" \\" \\"))" "(retrieve-caps \\"Hola\\")" "(retrieve-caps [\\"hola\!\\" \\"diego\\"])" "(map (fn [text] (filter (clojure.string/UpperCase text)\\"Hola\\")))" "(map(fn [text](filter(text))(\\"Hola\\")))" "(compress-sequence [1 2 2 3 4 5 6 7 8 9 8 8 8 8 8 8 8 8 8 7 77 7 7 7 7 7 7 7 7])" "(inter-two [1 2 3 4 5] [2 3 4 56])" "(some \#(when((even? %)%)[1 2 3 4 5 6 7 8 9]))" "(some \#(when(even? %)%)[1 2 3][4 5 6])" "(filter(complement even?) [1 2 3 4 5 6 7])" "(filter-odd [1 2 3 4 5 6 7])" "(filter-odd [1 2 3])" "(filter-odd [1 2 3 4 5])" "(retrieve-caps \\"Hola\\")" "(compress-sequence [1 2 3 4 4 4 4 4 4 4 4 4 4 4 4])" "(compress-sequence [1 2 3 4 4444 44 4 4 4 4])" "(run-tests)" "(compress-sequence [1 2 2 2 2 2 2 1 1 1 1 2 2 2 2 2])" "(max-value [1 2 3 4 5 6])" "(max-value (1 2 3 4 5 6) 7 8 9)" "(max-value 1 2 3 [ 4 5 6 ])" "(max-value 1 3 4 5 6 7 8 9)" "(implement-range 1 10)" "(implement-range [1] [10])" "(implement-range (1 20))" "(implement-range 1 4)" "(sort-by 1 2 3 4 5 9 55 22 11 10 222)" "(sort-by [1 2 6 4 5 9 22 11 12 13 15])" "(implement-range 5 8)" "(sort [ 1 2 7 5 4 9 8])" "(max-value 1 2 3 4 [ 5 6 7])" "(max-value 1 2 3 7 9 8 15 14 12)" "(sort 9 8 7 6 5 4 3 2 1)" "(sort [9 8 7 6 5 4 3 2 1])" "(max-value [9 8 7 6 5 4 3 2 1])" "(max-value [1 2 3 9 8 7 6])" "(max-value 9 8 7 2 1 5 6 22 14 32 2333 45 3 65 23423 23 243 54)" "(max-value 1 3 34 3222 43 24)" "(max-value 9 8 7 2)" "(max-value 1 9 8 2 4)" "(max-value 1 2 3 4 (9 8 7 6))" "(run-tests)" "(nil-key \:a {\:a nil \:b 2})" "(filter-odd [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19])" "(compress-sequence [1 1 2 3 3 2 2 3])" "(distinct 1 2 1 2 2 1 1 1 1 1)" "(distinct [1 2 2 1 2 1 2 1 2 3 3 3])" "(compress-sequence [1 2 2 1 2 1 2 1 2 3 3 3])" "(compress-sequence [1 2 2 1 2 2 1 2 2 1 2 3 3 3])" "(retrieve-caps \\"HeLlO, WoRlD\!\\")" "(find-truth false true false)" "(find-truth false false false)" "(find-truth false true false)" "(find-truth false false false true)" "(find-truth [false false])" "(find-truth false true false)" "(find-truth false false false)" "(defn nth [s n] take 1(drop [1 2 3 4 5] [3 4 5 6 7 8]))" "(zip-map [1 2 3 4] [ 5 6 7 8])" "(zip-map [1 2 3 4] [ 4 5 6 7 7])" "(zip-map (1 2 3 4 5) ( 4 3 2 1))" "(take 1 [1 2 3 4 5 6])" "(take 1 [2 3 4])" "(drop 4 [2 3 4 5 6 7 8 9])" "(inter-two [1 2 3 4] [2 3 4 5])" "(inter-two [1 2 3] [4 5 6])" "(inter-two [1 2 3 4])" "(inter-two 1 2 3 4 5 6)" "(inter-two [1 2 3 4 5] [6 7 8 9 10])" "(find-truth true true true)" "(find-truth true false)" "(run-tests)" "(inter-two [1 2 3 4] [2 34 4])" "(inter-two [1 2 3] [\:a \:b \:c])" "(inter-two [1 2 3] [4 5 6])" "(map hash-map [1 2 3] [ 4 5 6])" "(clojure.string/upper-case \\"Hola\\")" "(zip-map [\:a \:b \:c] [1 2 3])" "(zip-map [1 2 3 4] [\\"one\\" \\"two\\" \\"three\\"])" "(run-tests)"]
eclipse.preferences.version=1
